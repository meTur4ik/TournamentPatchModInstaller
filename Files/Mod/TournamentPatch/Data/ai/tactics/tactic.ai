class 'Tactic'

Tactic.States = 
{
	Disabled = "Disabled",
	Idle = "Idle",
	Attack = "Attack",
	Hold = "Hold",
	Retreat = "Retreat",
	Invalid = "Invalid"
}

Tactic.Options = 
{
	can_reinforce = true,
}

--amount of resources tactics have to leave unused
Tactic.ResourceFloor =
{
	requisition = 2000,
	power = 1000
}

Tactic.Variant =
{
	Vector = 0,
	SquadAI = 1,
	BaseAI = 2,
	Invalid = 3
}

Tactic.Engineers =
{
	num_currrently_resourcing = 0,
	num_reserved_for_resourcing = 2,
	total_engineer_count = 0,
}

Tactic.Attach =
{
	num_unattached_ranged_squads = 0,
	num_unattached_melee_squads = 0,

	num_unattached_ranged_leaders = 0,
	num_unattached_melee_leaders = 0,

	num_attached_commissars = 0,
	num_attached_priests = 0,
}

Tactic.UtilityFunctions =
{
	InitAbilitiesTable = function(abilities)
		if table.getn(abilities) > 0 and abilities[1][1] == nil then
			for i in abilities do
				local ability_id = cpu_manager.stats:GetAbilityID( abilities[i][2] )
				abilities[i][1] = ability_id
			end
		end
	end,

	-- if args is a table, set attribute ability_id to the id of the ability
	SetArgAbilityID = function(abilities)
		if table.getn(abilities) > 0 and abilities[1][1] ~= nil then
			for i in abilities do
				if (type(abilities[i][4]) == "table") then
					abilities[i][4].ability_id = abilities[i][1]
				end
			end
		end
	end,
	
	DoAbilities = function(abilities,ai,do_functor)
		for i in abilities do
			local ability_id = abilities[i][1]
			if ability_id ~= nil then

				local filter = abilities[i][3]
				local args = abilities[i][4]
				do_functor( ai, ability_id, filter, args )
			end
		end
	end,
}

--? @shortdesc ctor
--? @args SquadAI squad_ai
--? @result void
function Tactic:__init( squad_ai )

	dbAssert( squad_ai ~= nil )
	
	self.squad_ai = squad_ai
	self.status = "Initialized"
	self.prev_sub_state = nil
	
	self.state = nil
	self.state_function = nil
	self.state_function_map = {}

	self.tactic_name = nil
	
	self.state_function_map[ Tactic.States.Idle ] = Tactic.IdleState
	self.state_function_map[ Tactic.States.Disabled ] = Tactic.StartDisabledState
	
	self.sub_state_name = "No Sub State"
	
	self:SetState( Tactic.States.Idle )
end


function Tactic:IsComplete()
	return not self.squad_ai:IsValid()
end

--? @shortdesc Set the name of the plan
--? @args name
--? @result void
function Tactic:SetName( name )
	self.tactic_name = name
end

--? @shortdesc Get the name of the tactic
--? @args 
--? @result string
function Tactic:GetName()
	dbAssert( self.tactic_name ~= nil )
	return self.tactic_name
end


function Tactic:Update()
	
	profile_start("Update")
	
	local continue = true 
	if self:GetState() == Tactic.States.Disabled then
		continue = false
	end
	
	if continue and self:IsComplete() then
		continue = false
	end
	
	if not cpu_manager.components[ CpuPlayer.CT_Tactics ] then
		continue = false	
	end
	
	if continue then
		self.state_function( self )
	end
	
	profile_end("Update")

	return continue
end


--? @shortdesc stay in the same state, but use a new state function (a substate)
--? @args function state_function
--? @result void
function Tactic:SetSubState( state_function, sub_state_name )

	dbAssert( state_function ~= nil )
	
	self.prev_sub_state = self.state_function
	self.prev_sub_state_name = self.sub_state_name
	
	self.state_function = state_function
	self.sub_state_name = sub_state_name

end


function Tactic:GetSubState()
	return self.state_function, self.sub_state_name
end


function Tactic:GetPrevSubState()
	
	return self.prev_sub_state, self.prev_sub_state_name
	
end

--? @shortdesc change the current state of the tactic and enter the starting state function 
--? @extdesc will use IdleState if no appropriate beginning state function exists \n
--? available states: \n
--? Tactic.States.Idle \n
--? Tactic.States.Attack \n
--? Tactic.States.Hold \n
--? @args Tactic.State state
--? @result void
function Tactic:SetState( state )

	dbAssert( state ~= nil )
	self.state = state
	
	--if you don't have a function for this, use idle state
	if( self.state_function_map[ state ] == nil ) then
		self.state_function = Tactic.IdleState
	else
		self.state_function = self.state_function_map[ state ]
	end

	--reset
	self.sub_state_name = "Initialized"
	self.prev_sub_state_name = "Initialized"
	self.prev_sub_state = nil
	
end


--? @shortdesc returns the current state for this tactic
--? @args 
--? @result Tactic.State state
function Tactic:GetState()
	return self.state
end


--? @shortdesc assign the starting function to use when this tactic enters a state
--? @args Tactic.State state, function state_func
--? @result void
function Tactic:AssignStateFunction( state, state_func )
	
	dbAssert( state_func ~= nil )
	self.state_function_map[ state ] = state_func
end


--? @shortdesc state used when the tactic is not locked
--? @args 
--? @result void
function Tactic:IdleState()

	local not_in_threat = function( base )
		return not cpu_manager.terrain_analyzer:HasThreat( base:GetPosition(), 20 ) 
	end
	
	--not locked and if at any time I'm in danger, run away
	if not self.squad_ai:IsLocked() and self.squad_ai:WasRecentlyHurt() and not self.squad_ai:IsInStateMove() then
		local base = cpu_manager:FindClosestFriendlyBaseOrStrategicPoint( self.squad_ai:GetPosition(), 25, not_in_threat, not_in_threat )
		if base ~= nil then
			aitrace("tactics idle move: "..self.squad_ai:GetID())
			self.squad_ai:DoMove( base:GetPosition() )
		end
	end
end


--? @shortdesc state used when a designer locks a resource
--? @args 
--? @result void
function Tactic:StartDisabledState()

	if self.squad_ai ~= nil and self.squad_ai:IsValid() then
		self.squad_ai:DoStop()
	end
	
	self:SetSubState( Tactic.DisabledState )
end


--? @shortdesc state used when the tactic should not do anything
--? @args 
--? @result void
function Tactic:DisabledState()
end


--? @shortdesc set a target for the tactic. This target is a variant, so it may be of different types depending on the current state
--? @extdesc available variants: \n
--? Tactic.Variant.Vector \n
--? Tactic.Variant.SquadAI \n
--? Tactic.Variant.BaseAI \n
--? @args Variant target
--? @result void
function Tactic:SetTarget( target, variant_type )

	dbAssert( variant_type < Tactic.Variant.Invalid )
	self.variant_type = variant_type
	self.target = target
end


function Tactic:UpdateStance()

	dbAssert( self.squad_ai ~= nil ) 
	dbAssert( self.squad_ai:IsValid() )
	
	--check if I have setup time
	if self.squad_ai:HasSetupTime() and self.squad_ai:IsRanged() then
		if self.squad_ai:GetStance() ~= SquadAI.STANCE_StandGround then
			self.squad_ai:DoSetStance( SquadAI.STANCE_StandGround )
		end
	elseif self.squad_ai:GetStance() ~= SquadAI.STANCE_Hold then
		self.squad_ai:DoSetStance( SquadAI.STANCE_Hold )
	end
end


function Tactic:IsAttacker()

	--default troopers can attack
	return true
end


function Tactic:IsDefender()

	--default troopers can defend
	return true
end


function Tactic:CanSpendMoney()

	-- if we have the race specific build strategy, consult it (otherwise, consult the default one)
	if (cpu_manager.build_base_strategy ~= nil) then
		return cpu_manager.build_base_strategy:CanTacticSpendMoney()
	else
		return BuildBaseStrategy.CanTacticSpendMoney()
	end
end


function Tactic:TryAttachSquad( bMeleeUnit, bSetMatchingStance )

	local attach_range_filter = function( squad_ai )
		return self.squad_ai:CanAttachTo( squad_ai ) and squad_ai:IsRanged()
	end

	local attach_melee_filter = function( squad_ai )
		return self.squad_ai:CanAttachTo( squad_ai ) and not squad_ai:IsRanged()
	end

	if bMeleeUnit == true then		
		
		local attach_to = cpu_manager:GetClosestSquad( self.squad_ai:GetPosition(), 1000, attach_melee_filter );
		if attach_to == nil and bSetMatchingStance == false then
			-- try for ranged unit if we don't care about the stance
			attach_to = cpu_manager:GetClosestSquad( self.squad_ai:GetPosition(), 1000, attach_range_filter );
		end

		if attach_to ~= nil then
			self.squad_ai:DoAttachSquad( attach_to )

			if bSetMatchingStance == true then
				attach_to:DoSetMeleeStance( SquadAI.MSTANCE_Assault )
			end

			return true
		end

	else
		
		local attach_to = cpu_manager:GetClosestSquad( self.squad_ai:GetPosition(), 1000, attach_range_filter );
		if attach_to == nil and bSetMatchingStance == false then
			-- try for melee unit if we don't care about the stance
			attach_to = cpu_manager:GetClosestSquad( self.squad_ai:GetPosition(), 1000, attach_melee_filter );
		end

		if attach_to ~= nil then
			self.squad_ai:DoAttachSquad( attach_to )

			if bSetMatchingStance == true then
				attach_to:DoSetMeleeStance( SquadAI.MSTANCE_Ranged )
			end

			return true
		end
	end

	return false
end


function Tactic:TryAttachAssassinateSquad( bMeleeStance )

	local attachable_filter = function( squad_ai )
		return squad_ai:GetProRatedCost() >= 200 and self.squad_ai:CanAttachTo( squad_ai )
	end

	-- assassinate win condition -- always attach to a squad
	local attach_to = cpu_manager:GetClosestSquad( self.squad_ai:GetPosition(), 40, attachable_filter );
	if attach_to ~= nil then 
		self.squad_ai:DoAttachSquad( attach_to )
		
		if bMeleeStance == true then
			attach_to:DoSetMeleeStance( SquadAI.MSTANCE_Melee )
		else
			attach_to:DoSetMeleeStance( SquadAI.MSTANCE_Ranged )
		end
	end
end


function Tactic:TryAttachSquadMelee()

	--if I'm in combat
	if self.squad_ai:IsInCombat() then
	
		if self.squad_ai:GetHealthPercentage() <= 0.3 then
		
			local attachable_filter = function( squad_ai )
				return self.squad_ai:CanAttachTo( squad_ai )
			end
			
			--find close by squads
			local attach_to = cpu_manager:GetClosestSquad( self.squad_ai:GetPosition(), 10, attachable_filter );
			if attach_to ~= nil then 
				self.squad_ai:DoAttachSquad( attach_to )
				attach_to:DoSetMeleeStance( SquadAI.MSTANCE_Assault )
				return true
			end

		else
			local melee_filter = function( squad_ai )
				return self.squad_ai:CanAttachTo( squad_ai ) and not squad_ai:IsRanged()
			end
			
			local attach_to = cpu_manager:GetClosestSquad( self.squad_ai:GetPosition(), 10, melee_filter );
			if attach_to ~= nil then 
				self.squad_ai:DoAttachSquad( attach_to )
				attach_to:DoSetMeleeStance( SquadAI.MSTANCE_Assault )
				return true
			end
		end
	end
	
	return false
end


--used for lower difficulty settings: some special units (such as bloodthirster) should always be in the attacking force if created
function Tactic:AlwaysAttack()
	return false
end


--try jumping into battle and engage the ranged guys
function Tactic:JumpAttackMelee()
	
	profile_start( "JumpAttackMelee" )
	
	--don't jump if I can't jump, or I'm fighting, or I'm explicitly told to move somewhere (probably retreating)
	if not self.squad_ai:CanJump() or self.squad_ai:IsInStateMove() or self.squad_ai:IsRanged() then
		profile_end( "JumpAttackMelee" )
		return false
	end
	
	--check if I'm already in proximity of enemy
	local my_pos = self.squad_ai:GetPosition()
	
	local func = function( squad )
	
		local squad_pos = squad:GetPosition()
		if 	squad:IsRanged() and 
			distance_sqr( my_pos, squad_pos ) < 400 then
		
			return true
		end
		
		return false
	end
	
	local enemy = cpu_manager:FindFirstEnemy( func )
	
	if enemy ~= nil then
		profile_end( "JumpAttackMelee" )
		return false
	end
	
	local distance = self.squad_ai:GetJumpDistance()
	
	local max_dist_sqr = distance*distance
	
	-- get the first ranged enemy in my jump radius
	func = function( squad )
	
		local squad_pos = squad:GetPosition()
		if 	squad:IsRanged() and 
			distance_sqr(my_pos, squad_pos ) < max_dist_sqr and
			self.squad_ai:CanJumpToPosition( squad_pos ) then
		
			return true
		
		end
		return false
	end
	
	enemy = cpu_manager:FindFirstEnemy( func )
	
	if enemy == nil then
		profile_end( "JumpAttackMelee" )
		return false
	end
	
	local pos = enemy:GetPosition()
	self.squad_ai:DoJump( pos )
	
	profile_end( "JumpAttackMelee" )
	return true
end
