class 'VehicleTactic' (Tactic)

VehicleTactic.SpecialAbilities = 
{
	{ nil, "necron_wraith_phase_shift", Ability.PredicateFilters.IsUnderAttackAndNotAttackingOrLowHealth, { min_health = 0.2 } },
}

VehicleTactic.PosAbilities = 
{
	{ nil, "earthshaker_round",	Ability.Filters.CloseEnemy, 4 },
	{ nil, "guard_let_it_burn",	Ability.Filters.CloseEnemy, 4 },
	{ nil, "tau_skyray_missile_barrage",	Ability.Filters.CloseEnemy, 4 },
}


function VehicleTactic:__init( squad_ai ) super( squad_ai )

	Tactic.AssignStateFunction( self, Tactic.States.Hold, VehicleTactic.BeginHoldState )
	Tactic.AssignStateFunction( self, Tactic.States.Retreat, VehicleTactic.BeginRetreatState )
	Tactic.AssignStateFunction( self, Tactic.States.Attack, VehicleTactic.BeginAttackState )
	
	Tactic.UtilityFunctions.InitAbilitiesTable(VehicleTactic.SpecialAbilities)
	Tactic.UtilityFunctions.InitAbilitiesTable(VehicleTactic.PosAbilities)
	
	self:SetName("Vehicle Tactic")

end


function VehicleTactic:BeginHoldState()

	if( self.target == nil ) then
		return
	end

	if( self.variant_type == Tactic.Variant.Vector ) then
		self.squad_ai:DoAttackMove( self.target )
	end
	
	Tactic.SetSubState( self, VehicleTactic.HoldState, "Holding" )
end


function VehicleTactic:BeginRetreatState()

	dbAssert( self.target ~= nil )
	
	if( self.variant_type == Tactic.Variant.Vector ) then
		self.squad_ai:DoMove( self.target )
	end
	
	Tactic.SetSubState( self, VehicleTactic.HoldState, "Holding" )
end


function VehicleTactic:HoldState()

	if( self.target == nil ) then
		return
	end
end


function VehicleTactic:BeginAttackState()
	
	if( self.target == nil ) then
		return
	end

	if( self.variant_type == Tactic.Variant.Vector ) then
		self.squad_ai:DoAttackMove( self.target )
	end
	
	Tactic.SetSubState( self, VehicleTactic.AttackingState, "Attacking" )
end


function VehicleTactic:AttackingState()
	if self.squad_ai:IsIdle() then		
		Tactic.SetState( self, self:GetState() )
	end
end


function VehicleTactic:DoAbilities()

	Tactic.UtilityFunctions.DoAbilities(VehicleTactic.SpecialAbilities,self.squad_ai,Ability.DoAbility)
	Tactic.UtilityFunctions.DoAbilities(VehicleTactic.PosAbilities,self.squad_ai,Ability.DoAbilityPos)

end


function VehicleTactic:Update()

	-- state machine
	if not Tactic.Update( self ) then
		return false
	end

	if self.squad_ai:HasUpgradableTrooper() then
		local class_type = cpu_manager:GetFirstEnemyPlayer():GetMajorityClassType()
		self.squad_ai:DoBestUpgrade( class_type )
	end

	self:DoAbilities()
	self:UpdateStance()

	return true
end
