class 'CapturePlan' (Plan)

CapturePlan.Maximums = 
{
	points = INT_MAX,
	objectives = INT_MAX
}

function CapturePlan:__init( base_location ) super( CpuPlayer.CT_Resourcing )

	dbAssert( base_location ~= nil )
	
	-- save a copy of the base to resource close to
	self.base_location = Vector3f( base_location )
	
	-- the flag I'm trying to capture
	self.capturing_flag = nil
	self.capturing_squad = nil
	self.support_squad = nil
	
	Plan.SetState( self, "Capture Flag", CapturePlan.CaptureFlag )
	Plan.SetName( self, "Capture Plan" )
	
	Plan.SetNeeds( self, "Obtain Capturers", CapturePlan.ObtainCapturers )
	Plan.SetWants( self, "Obtain Capturer Supporters", CapturePlan.ObtainCapturerSupport )
end

function CapturePlan:IsEqual( plan_name, plan_id )
	return self:GetName() == plan_name
end

function CapturePlan:FindFreeStrategicPoint( from_pos )
	
	--check if I can have more strategic points
	local my_num_pts = resource_manager:GetNumOwnedStrategicPoints()
	
	--don't own more than max
	if (my_num_pts +1) > CapturePlan.Maximums.points then
		return nil
	end
	
	--check if I can have more objectives
	local can_have_objs = true
	local my_num_objs = resource_manager:GetNumOwnedStrategicObjectives()
	
	--don't own more than max
	if (my_num_objs+1) > CapturePlan.Maximums.objectives then
		can_have_objs = false
	end
	
	-- find a strat flag that can be captured
	local strategic_flag = nil
	local prev_distance = 0
	local candidate_points = {}
	
	-- get candidate strategic points
	for strat_ai in resource_manager:GetUnlockedStrategicPointAIs() do
		--don't go over the maximum number of objectives
		if not strat_ai:IsStrategicObjective() or can_have_objs then
			if 	not cpu_manager:IsFriendly( strat_ai:Owner() ) and 
				not strat_ai:HasListeningPost() then 
				
				local point_info = {}
				point_info.point = strat_ai
				point_info.distance = distance(from_pos,strat_ai:GetPosition())
				
				table.insert(candidate_points,point_info)
			end
		end
	end
	
	-- sort candidates so we start with closest
	table.sort(candidate_points,function(e1,e2) return e1.distance < e2.distance end)
	
	for i,candidate in candidate_points do
		local strat_ai = candidate.point
		
		if strategic_flag == nil then
			if not cpu_manager.terrain_analyzer:HasThreatOnPath( from_pos, strat_ai:GetPosition(), 15 ) then
				strategic_flag = strat_ai
				prev_distance = cpu_manager.terrain_analyzer:GetPathingDistance( from_pos, strat_ai:GetPosition() )
			end
		elseif (candidate.distance < prev_distance or prev_distance == -1) then
			local new_distance = cpu_manager.terrain_analyzer:GetPathingDistance( from_pos, strat_ai:GetPosition() )

			--check distance and not in Danger Zone
			if (new_distance > 0 and (new_distance < prev_distance or prev_distance == -1)) then
				if not cpu_manager.terrain_analyzer:HasThreatOnPath( from_pos, strat_ai:GetPosition(), 15 ) then
					strategic_flag = strat_ai
					prev_distance = new_distance
				end
			end
		end
	end
	
	return strategic_flag
end

function CapturePlan:ObtainCapturers()

	--use the one I've already locked
	if self.capturing_squad == nil then
	
		local cur_cost = 0
		
		-- choose weakest squad
		for squad_ai in military_manager:GetUnlockedSquads() do

			-- don't lock ones already in danger
			if squad_ai:IsValid() and not cpu_manager.terrain_analyzer:HasThreat( squad_ai:GetPosition(), 15 ) then

				-- find one that can capture
				if squad_ai:CanCapture() and not squad_ai:WasRecentlyHurt() then
					
					if( self.capturing_squad == nil ) then
						self.capturing_squad = squad_ai
						cur_cost = squad_ai:GetProRatedCost()
					else
					
						local cost = squad_ai:GetProRatedCost()
										
						if( cost < cur_cost ) then
							self.capturing_squad = squad_ai
							cur_cost = cost
						end
						
					end
		
				end
			
			end
			
		end
		
		if ( self.capturing_squad == nil ) then
			aitrace( "no squads can capture!" )
			return
		end
				
		Plan.LockResource( self, self.capturing_squad )
	end

	--find closest flag to base
	local strategic_flag = self:FindFreeStrategicPoint( self.base_location )
	
	if( strategic_flag == nil ) then
		
		Plan.UnlockResource( self, self.capturing_squad )
		if (self.support_squad ~= nil) then
			Plan.UnlockResource( self, self.support_squad )
		end
		
		self:SetComplete( true )
		self.capturing_flag = nil
		aitrace( "no more strategic flags to capture!" )

		return
	end

	self.capturing_flag = strategic_flag

	Plan.LockResource( self, self.capturing_flag )

end

function CapturePlan:ObtainCapturerSupport()

	if ( self.capturing_squad == nil ) then
		aitrace( "no capture squads, so no support!" )
		return
	end

	--use the one I've already locked
	if self.support_squad == nil then

		-- if the capturing squad is engineer, try to include an infantry squad
		if (self.capturing_squad:IsEngineer()) then

			local cur_cost = 0
		
			-- choose weakest squad
			for squad_ai in military_manager:GetUnlockedSquads() do

				-- not another engineer, not the same unit
				if squad_ai:IsValid() and squad_ai:GetID() ~= self.capturing_squad:GetID() and not squad_ai:IsEngineer() then

					if( self.support_squad == nil ) then
						self.support_squad = squad_ai
						cur_cost = squad_ai:GetProRatedCost()
					else
						local cost = squad_ai:GetProRatedCost()
										
						if( cost < cur_cost ) then
							self.support_squad = squad_ai
							cur_cost = cost
						end
					end
				end
			end
			
			if ( self.support_squad ~= nil ) then
				Plan.LockResource( self, self.support_squad )
				if (self.capturing_flag ~= nil) then
					self.support_squad:DoMove( self.capturing_flag:GetPosition() )
				end
				
				Plan.SetWants( self, "No Wants", Plan.WantsFulfilled )
			else
				aitrace( "no support squad found!" )
			end
		else
			Plan.SetWants( self, "No Wants", Plan.WantsFulfilled )
		end
	end	
end

function CapturePlan:FightBack()

	--if no more danger, reset
	if not self.capturing_squad:WasRecentlyHurt() then
		
		Plan.SetState( self, "Capture Flag Again", CapturePlan.CaptureFlag )
		return
		
	end

	local owner = self.capturing_flag:Owner()
	local pos = self.capturing_squad:GetPosition()
	
	--if too many guys, run away
	local current_threat = cpu_manager.terrain_analyzer:GetThreatAtPos( pos, 15, false )
	
	--figure out defensive buildings threat
	if owner ~= 0 then
		local player = cpu_manager.stats:GetPlayerStatsFromID( owner ) 
		current_threat = current_threat - cpu_manager:GetDefensiveBuildingsCostAt( player, pos, 15 )
	end
	
	local max_threat = 50
		
	local fight_squad = self.support_squad
	local stealth_threat = false
	
	if (self.support_squad ~= nil) then
		max_threat = 150
	else
		fight_squad = self.capturing_squad
	end

	-- is stealthed squad attacking us, and we can't respond
	if (fight_squad ~= nil) then
		if 	fight_squad:IsUnderAttack()  and not fight_squad:IsAttacking() then
			local is_squad_infiltrated = function(squad_ai)
				return squad_ai:IsInfiltrating()
			end	
			stealth_threat = cpu_manager:FindClosestEnemy( fight_squad:GetPosition(), 30, is_squad_infiltrated ) ~= nil
		end
	end
	
	if current_threat > max_threat or stealth_threat then
	
		local not_in_threat = function( base )
			return not cpu_manager.terrain_analyzer:HasThreat( base:GetPosition(), 20 ) 
		end
	
		aitrace("run away from capturing")
		local base = cpu_manager:FindClosestFriendlyBaseOrStrategicPoint(self.capturing_squad:GetPosition(), 25 , not_in_threat, not_in_threat)
		if base ~= nil then
			self.capturing_squad:DoMove( base:GetPosition() )
			if (self.support_squad ~= nil) then
				self.support_squad:DoMove( base:GetPosition() )
			end
		end

		self:SetComplete( true )

	elseif current_threat > 0 then

		if not self.capturing_squad:IsReinforcing() then
				
			local temp_req = Tactic.ResourceFloor.requisition
			local temp_pow = Tactic.ResourceFloor.power

			Tactic.ResourceFloor.requisition = 150
			Tactic.ResourceFloor.requisition = 75
		
			if self.capturing_squad:CanReinforce( true, 0 ) then
				self.capturing_squad:DoReinforce( true, 0 )
			elseif self.capturing_squad:CanReinforce( false, 0 ) then
				self.capturing_squad:DoReinforce( false, 0 )
			end

			Tactic.ResourceFloor.requisition = temp_req
			Tactic.ResourceFloor.power = temp_pow
		end
	end
end


function CapturePlan:CapturingFlag()

	--check if a teammate is capturing
	local friendly_capture = false
	if self.capturing_flag:Owner() ~= 0 and 
		self.capturing_flag:Owner() ~= cpu_manager.player_id and 
		cpu_manager:IsFriendly( self.capturing_flag:Owner() ) then
		
		friendly_capture = true
		
	end
	
	if friendly_capture or 
		(self.capturing_flag:FinishedCapturing() and cpu_manager:IsFriendly( self.capturing_flag:Owner() ) ) then
		
		self:UnlockResource( self.capturing_flag )
		self.capturing_flag = nil

		local base = cpu_manager:FindClosestBaseOrStrategicPoint( self.capturing_squad:GetPosition(), 25 )
		if base ~= nil then
			self.capturing_squad:DoMove( base:GetPosition() )
		end
		
		Plan.SetState( self, "Capture New Flag", CapturePlan.CaptureFlag )
		Plan.SetNeeds( self, "Get new strategic pt Capturers", CapturePlan.ObtainCapturers )
		Plan.SetWants( self, "Get new strategic pt Capture Support", CapturePlan.ObtainCapturerSupport )
		return
	end
	
	--if at any time I'm in danger, fight back or quit out
	--make sure we're not nearly done
	local owner = self.capturing_flag:Owner()
	if self.capturing_squad:WasRecentlyHurt() and 
		not ( self.capturing_flag:IsStrategicObjective() and cpu_manager:IsFriendly( owner ) and self.capturing_flag:GetCaptureProgress() >= 0.85 ) and
		not ( not self.capturing_flag:IsStrategicObjective() and cpu_manager:IsFriendly( owner ) and self.capturing_flag:GetCaptureProgress() >= 0.7 ) then
		
		local pos = self.capturing_squad:GetPosition()
		
		--figure out military threat
		local current_threat = cpu_manager.terrain_analyzer:GetThreatAtPos( pos, 15, false )
		
		--figure out defensive buildings threat
		if owner ~= 0 then
			local player = cpu_manager.stats:GetPlayerStatsFromID( owner ) 
			current_threat = current_threat - cpu_manager:GetDefensiveBuildingsCostAt( player, pos, 15 )
		end
		
		local current_health = self.capturing_squad:GetHealthPercentage()
		local should_retreat = false
		
		local max_threat = 50
		local min_health = 0.6
		
		if (self.support_squad ~= nil) then
			max_threat = 150
			min_health = 0.4
			-- if the support squad can't help, then leave
			if (self.support_squad:IsUnderAttack() and not self.support_squad:IsAttacking()) then
				should_retreat = true 
			end
		end
		
		if current_threat > max_threat or current_health < min_health or should_retreat then
		
			local not_in_threat = function( base )
				return not cpu_manager.terrain_analyzer:HasThreat( base:GetPosition(), 20 ) 
			end	
			
			local base = cpu_manager:FindClosestFriendlyBaseOrStrategicPoint( self.capturing_squad:GetPosition(), 25, not_in_threat, not_in_threat )
			if base ~= nil then
				self.capturing_squad:DoMove( base:GetPosition() )
			end
			self:SetComplete( true )
			return
			
		else
			Plan.SetState( self, "Fighting back!", CapturePlan.FightBack )
			if (self.support_squad ~= nil) then
				self.support_squad:DoAttackMove( self.support_squad:GetPosition() )
			else
				self.capturing_squad:DoAttackMove( self.capturing_squad:GetPosition() )
			end
		end
	end
	
	if not self.capturing_squad:IsCapturing() then
		self:Retry()
	end
end


function CapturePlan:CaptureFlag()

	if( self.capturing_flag == nil ) then
		return
	end
	
	local entity = self.capturing_flag:GetEntity()

	self.capturing_squad:DoDefault( entity )

	if (self.support_squad ~= nil) then
		self.support_squad:DoMove( self.capturing_flag:GetPosition() )
	end
	
	self:OnEvent( Plan.Events.OnStart )
	
	Plan.SetState( self, "Capturing flag", CapturePlan.CapturingFlag )
	Plan.SetNeeds( self, "No needs", Plan.NeedsFulfilled )
end

function CapturePlan:Retry()

	local entity = self.capturing_flag:GetEntity()
	
	if (self.support_squad ~= nil) then
		self.support_squad:DoMove( self.capturing_flag:GetPosition() )
	end

	self.capturing_squad:DoDefault( entity )
	
end

function CapturePlan:Update()

	if self:IsComplete() then
		return
	end

	if self.support_squad ~= nil and not self.support_squad:IsValid() then
		self.support_squad = nil
	end
	
	if self.capturing_squad ~= nil and not self.capturing_squad:IsValid() then
		self:SetComplete( true )
		return
	end
	
	Plan.Update(self)

end
