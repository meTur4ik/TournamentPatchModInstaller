class 'NecronBuildBaseStrategy' (BuildBaseStrategy)


NecronBuildBaseStrategy.ResearchOrder =
{
	{ 1, 	"necron_warrior_boost" },

	{ 2, 	"necron_power_research" },
	{ 2, 	"necron_wraith_boost" },
	{ 2, 	"necron_warrior_boost_2" },

	{ 3, 	"necron_power_research_2" },	
	{ 3, 	"necron_night_bringer_research" },	
}

NecronBuildBaseStrategy.ForbiddenResearchOrder =
{
	{ 1, 	"necron_phase_shifter_research", nil },
	{ 1, 	"necron_lightning_field_research", nil },
	{ 1, 	"necron_solar_pulse_research", nil },
--	{ 1, 	"necron_chronometron_research", nil },	-- possible bug with related ability

	{ 2, 	"necron_phylactery_research", nil },

	{ 3, 	"necron_resurrection_orb_research", nil },
	{ 3, 	"necron_nightmare_shroud_research", nil },
	{ 3, 	"necron_veil_of_darkness_research",nil },
}

function NecronBuildBaseStrategy:__init( baseinfo ) super( baseinfo )

	-- Limit tactics
	-- NOTE: These #'s are horrifically dependent on balance changes, we should
	-- scan the costs of all structures / add-ons / researches that let us tier up 
	-- and figure out a min from that
	self.spend_now_req = 0
	self.spend_later_req = 0
	self.spend_now_pow = 250
	self.spend_later_pow = 400

	self.generator_name = "necron_plasma_generator"
	self.bigger_generator_id = cpu_manager.stats:GetBuildingID("necron_thermoplasma_generator")

	self.hq_building_name = "monolith"
	self.hq_building_id = cpu_manager.stats:GetBuildingID( self.hq_building_name )
	dbAssert( self.hq_building_id ~= nil )
	
	self.infantry_building_name = "necron_summoning_core"
	self.infantry_building_id = cpu_manager.stats:GetBuildingID( self.infantry_building_name )
	self.infantry_building2_name = "necron_greater_summoning_core"
	self.infantry_building2_id = cpu_manager.stats:GetBuildingID( self.infantry_building2_name )

	self.research_building_name = "necron_forbidden_archive"
	self.research_building_id = cpu_manager.stats:GetBuildingID( self.research_building_name )

	self.tier3_building_name = "necron_energy_core"
	self.tier3_building_id = cpu_manager.stats:GetBuildingID( self.tier3_building_name )
	
	self.post_addon1_id = cpu_manager.stats:GetAddOnID( "addon_necron_list_post_1")
	self.post_addon2_id = cpu_manager.stats:GetAddOnID( "addon_necron_list_post_2")

	self.turret_building_name = "necron_turret"
	self.turret_building_id = cpu_manager.stats:GetBuildingID( self.turret_building_name )
	dbAssert( self.turret_building_id ~= nil )
	
	self.turret_addon_id = cpu_manager.stats:GetAddOnID( "addon_necron_turret")
	
	self.tier2_addon_name = "addon_necron_hq_1"
	self.tier2_addon_id = cpu_manager.stats:GetAddOnID( self.tier2_addon_name )
	self.tier3_addon_name = "addon_necron_hq_2"
	self.tier3_addon_id = cpu_manager.stats:GetAddOnID( self.tier3_addon_name )

	self.teir4_vehicle_name = "necron_restored_monolith_squad"
	self.tier4_vehicle_id = cpu_manager.stats:GetSquadID( self.teir4_vehicle_name )
	
	-- choose 3 Forbidden Researches to research
	local fro_size = table.getn(NecronBuildBaseStrategy.ForbiddenResearchOrder)

	if (fro_size > 0) then
		local fro_idx1 = math.random(1,fro_size)
		local fro_idx2 = math.random(1,math.max(1,fro_size-1))
		local fro_idx3 = math.random(1,math.max(1,fro_size-2))
	
		if (fro_idx2 >= fro_idx1) then
			fro_idx2 = math.min(fro_size,fro_idx2 + 1)
		end
		if (fro_idx3 >= math.min(fro_idx1,fro_idx2)) then
			fro_idx3 = math.min(fro_size,fro_idx3 + 1)
		end
		if (fro_idx3 >= math.max(fro_idx1,fro_idx2)) then
			fro_idx3 = math.min(fro_size,fro_idx3 + 1)
		end
		
		NecronBuildBaseStrategy.ForbiddenResearchOrder[fro_idx1][3] = true
		NecronBuildBaseStrategy.ForbiddenResearchOrder[fro_idx2][3] = true
		NecronBuildBaseStrategy.ForbiddenResearchOrder[fro_idx3][3] = true
	end

end


function NecronBuildBaseStrategy:EvaluateSquadCap()

	local tierLevel = self:GetTierLevel()
	local max_squadcap = build_manager:GetSquadCapTotalMax()
	local max_vehiclecap = build_manager:GetSupportCapTotalMax()
	local current_max_squadcap = build_manager:GetSquadCapCurrentMax()
	local current_max_vehiclecap = build_manager:GetSupportCapCurrentMax()

	if build_manager:GetSquadCapCurrentMax() < build_manager:GetSquadCapTotalMax() or
		build_manager:GetSupportCapCurrentMax() < build_manager:GetSupportCapTotalMax() then
	
		if build_manager:GetSquadCapLeft() <= tierLevel * 2 or build_manager:GetSquadCapLeft() <= tierLevel * 2 then

			-- build listening posts
			local build_type = CpuBuildType()			
			build_type.btype = CpuPrerequisites.BT_Building
			build_type.name = "necron_listening_post"
			self:TryBuild( build_type )
		end	
	end

end


function NecronBuildBaseStrategy:DoSecondaryBuildings()

	local tierLevel = self:GetTierLevel()
	
	if tierLevel >=2 then

		local numTurrets = 0
		
		self.num_hq = 0
	
		for build_channel in build_manager:GetBuildChannelAIs() do
	
			if build_channel:GetBlueprintID() == self.hq_building_id then
				self.num_hq = self.num_hq + 1
			elseif build_channel:GetBlueprintID() == self.turret_building_id then
				numTurrets = numTurrets + 1
			end
		end

		-- build secondary HQ
		if resource_manager:GetResourceAmount():Get( ResourceAmount.RT_Requisition ) > 1000 then

			if tierLevel >= 3 and self.num_hq < tierLevel then
				local build_type = CpuBuildType()
				build_type.btype = CpuPrerequisites.BT_Building
				build_type.name = self.hq_building_name
				self:TryBuild( build_type )
			end
		end
		
		if( numTurrets < 4 * self.num_hq ) and ( resource_manager:GetResourceAmount():Get( ResourceAmount.RT_Power ) > 300 ) then
			if( self:PlanExists( "Build Building Plan", self.turret_building_id ) == false ) then 
				self.AddPlan( self, BuildBuildingPlan( self.turret_building_id ) )
			end
		end
		
	end
end


function NecronBuildBaseStrategy:UpdateTierLevel()

	self.tierLevel = 1
	local player_stats = cpu_manager.player_stats
	
	if (player_stats:GetNumSquadsByBPID(self.tier4_vehicle_id) > 0) then
		self.tierLevel = 4
		return
	end

	for base in military_manager:GetBases() do

		if (self.tierLevel < 3 and base:HasAddOn( self.tier3_addon_id )) then
				self.tierLevel = 3
		elseif (self.tierLevel < 2 and base:HasAddOn( self.tier2_addon_id )) then
			self.tierLevel = 2
		end
	end
	
end


function NecronBuildBaseStrategy:DoResourcePlan()

	local tierLevel = self:GetTierLevel()
	local numGenerators = resource_manager:GetNumOwnedPowerGenerators()
	local powerAmount = resource_manager:GetResourceAmount():Get( ResourceAmount.RT_Power )

	-- test if we have enough power to start capturing resources
	if (numGenerators > math.max(tierLevel, 2) or powerAmount > 500) then
		BuildBaseStrategy.DoResourcePlan(self)
	end
end


function NecronBuildBaseStrategy:DevalueUnitByTier( unit_stats )

	local devalue = 0

--[[	
	local tierLevel = self:GetTierLevel()

	if tierLevel == 2 then
		if unit_stats:GetSquadName() == "necron_basic_warrior_squad" then
			devalue = VALUE_PER_TIER * 2
		end

	elseif tierLevel == 3 then
		if unit_stats:GetSquadName() == "necron_basic_warrior_squad" then
			devalue = VALUE_PER_TIER * 2
		end

	elseif tierLevel == 4 then

		if unit_stats:GetSquadName() == "necron_basic_warrior_squad" then
			devalue = VALUE_PER_TIER * 2
		end
	end
]]
	
	return devalue
end


function NecronBuildBaseStrategy:DoResearch()

	local tierLevel = self:GetTierLevel()
	
	BuildBaseStrategy.UtilityFunctions.DoResearch(self,NecronBuildBaseStrategy.ResearchOrder,tierLevel)
		
	-- Research the Forbidden Archives
	for i in NecronBuildBaseStrategy.ForbiddenResearchOrder do 
		
		if (NecronBuildBaseStrategy.ForbiddenResearchOrder[i][3] and 
			not cpu_manager.cpu_player:IsResearchComplete( NecronBuildBaseStrategy.ForbiddenResearchOrder[i][2] )) then
		
			if (tierLevel < NecronBuildBaseStrategy.ForbiddenResearchOrder[i][1]) then
				-- do not research this yet!
				break
			else
			
				local id = cpu_manager.stats:GetResearchID( NecronBuildBaseStrategy.ForbiddenResearchOrder[i][2] )
				if (self:PlanExists( "Build Research Plan", id ) == false) then 				
				
					-- Ensure we have Forbidden Archives research building	
					local player_stats = cpu_manager.player_stats
					local building_count = player_stats:GetNumBasesByBPID(self.research_building_id,true)
					
					if (building_count == 0) and (not self:PlanExists("Build Building Plan",self.research_building_id)) then 
						local numGenerators = resource_manager:GetNumOwnedPowerGenerators()
						local powerAmount = resource_manager:GetResourceAmount():Get( ResourceAmount.RT_Power )

						if (numGenerators >= 4 or powerAmount > 1000) and
							(self:PlanExists("Build Building Plan",self.research_building_id) == false) then
							local build_type = CpuBuildType()
							build_type.btype = CpuPrerequisites.BT_Building
							build_type.name = self.research_building_name
							self:TryBuild( build_type)
						end
						-- don't try to research until we have building
						return 
					end

					aitrace( "wanting to do research "..NecronBuildBaseStrategy.ForbiddenResearchOrder[i][2] )

					self.AddPlan( self, BuildResearchPlan( id ) )
				end
			
				-- Only research 1 item at a time
				break
			end
		end
	end

end


function NecronBuildBaseStrategy:CalculateGeneratorDemand()

	local bBuildGenerator = false
	local bBuildBigGenerator = false
	
	local tierLevel = self:GetTierLevel()

	local numGenerators = resource_manager:GetNumOwnedPowerGenerators()
	local powerAmount = resource_manager:GetResourceAmount():Get( ResourceAmount.RT_Power )
	
	-- build if we are below our max # of generators per tier
	if( tierLevel == 1 ) then
		if (powerAmount < 200 and numGenerators < 5 ) or numGenerators < 3 then
			bBuildGenerator = true
		end
	elseif( tierLevel == 2 ) then
		if powerAmount < 500 and numGenerators < 7 then
			bBuildGenerator = true
		end
	else
		if powerAmount < 500 or numGenerators < ( self.num_hq * 6 ) then
			bBuildGenerator = true
		end
	end	
	
	bBuildBigGenerator = powerAmount < 1000
	
	return bBuildGenerator, bBuildBigGenerator
end


function NecronBuildBaseStrategy:CalculateDetectorDemand()

	-- don't build detector units if enemy has no stealth units
	if (cpu_manager.cpu_player:FindFirstInfiltratedEnemy(Vector3f(0,0,0),1000,1) == nil) then
		return
	end
	
	-- build stealth detectors: stealth suits
	local detector_name = "necron_builder_scarab_squad"
	local bpid = cpu_manager.stats:GetSquadID(detector_name)	
	local s_cnt = cpu_manager.player_stats:GetNumSquadsByBPID(bpid)
	local b_cnt = cpu_manager.player_stats:GetNumSquads() - s_cnt
	
	if (s_cnt < (b_cnt / 3) + 4) then
		local build_type = CpuBuildType()
		build_type.btype = CpuPrerequisites.BT_Squad
		build_type.name = detector_name
		self:TryBuild( build_type )
	end
	
end

function NecronBuildBaseStrategy:BuildStructureAddons()

	local tierLevel = self:GetTierLevel()

	
	if (tierLevel >= 2 and resource_manager:GetResourceAmount():Get( ResourceAmount.RT_Power ) > 400) then
		if (self:PlanExists( "Build AddOn Plan", self.post_addon1_id ) == false ) then 
			self.AddPlan( self, BuildAddOnPlan( self.post_addon1_id ) )
		end
	end

	if (tierLevel >= 3 and resource_manager:GetResourceAmount():Get( ResourceAmount.RT_Power ) > 600) then
		if( self:PlanExists( "Build AddOn Plan", self.post_addon2_id ) == false ) then 
			self.AddPlan( self, BuildAddOnPlan( self.post_addon2_id ) )
		end
	end

	if (tierLevel >= 2 and resource_manager:GetResourceAmount():Get( ResourceAmount.RT_Power ) > 500) then
		if ( self:PlanExists( "Build AddOn Plan", self.turret_addon_id ) == false ) then 
			self.AddPlan( self, BuildAddOnPlan( self.turret_addon_id ) )
		end
	end
	
	if (tierLevel == 1 and resource_manager:GetResourceAmount():Get( ResourceAmount.RT_Power ) > 400) then
		if( self:PlanExists( "Build AddOn Plan", self.tier2_addon_id ) == false ) then 
			local build_type = CpuBuildType()

			aitrace("trying to build tier2 addon")

			build_type.btype = CpuPrerequisites.BT_AddOn
			build_type.name = self.tier2_addon_name
			self:TryBuild( build_type )
		end
	end
	
	if (tierLevel == 2 and resource_manager:GetResourceAmount():Get( ResourceAmount.RT_Power ) > 500) then
		if( self:PlanExists( "Build AddOn Plan", self.tier3_addon_id ) == false ) then 
			local build_type = CpuBuildType()

			aitrace("trying to build tier3 addon")

			build_type.btype = CpuPrerequisites.BT_AddOn
			build_type.name = self.tier3_addon_name
			self:TryBuild( build_type )
		end
	end
	
	if (tierLevel == 3 and resource_manager:GetResourceAmount():Get( ResourceAmount.RT_Power ) > 1000) then
		if( self:PlanExists( "Build Unit Plan", self.tier4_vehicle_id ) == false ) then 
			local build_type = CpuBuildType()

			aitrace("trying to build tier4 vehicle")

			build_type.btype = CpuPrerequisites.BT_Squad
			build_type.name = self.teir4_vehicle_name
			self:TryBuild( build_type )
		end
	end
	
end
